import pytube
from pytube import YouTube as yt
import pytube as pt
import pandas as pd
import numpy as np
import os
import pysrt
from datetime import datetime
# splicing audio
import os
from pydub import AudioSegment




def get_subtitles(yt_object: pytube.__main__.YouTube, path):
    if yt_object.caption_tracks == []:
        print(f"No auto-generated and CC exists for {yt_object.title}")
        return None
    try:
        yt_object.captions["en"].download(title=yt_object.title, output_path=path)
        return True
    except KeyError:
        print(f"Video \"{yt_object.title}\" does not contain english subtitles")
        print("Downloading autogenerated subtitles")
        yt_object.captions["a.en"].download(title=yt_object.title, output_path=path)
        return True

def audiodn(filetype: str, bitrate, yt_obj, audio_folder: str, subtitle_folder:str):
    a_paths = os.getcwd() + os.sep + audio_folder
    if not os.path.exists(a_paths):
        os.mkdir(a_paths)
    s_paths = os.getcwd() + os.sep + subtitle_folder
    if not os.path.exists(s_paths):
        os.mkdir(s_paths)
    audios = yt_obj.streams.filter(only_audio=True)
    for audio in audios:
        if audio.mime_type[6:] == filetype and audio.bitrate > int(bitrate) and audio.bitrate < int(bitrate)+5000:
            # audio.download(output_path = path ,filename="sample.mp4")
            
            status_sub = get_subtitles(yt_object=yt_obj, path=s_paths)
            if status_sub == None:
                print("Aborting download")
                return 
            audio.download(output_path=a_paths)
            print(f"succesfully downloaded audio sample {audio.title} to {a_paths}")
            # return audio.mime_type #returning the file type so that can be used to split into chunks




def audio_sub_splitter(subs_folder: str, audio_folder: str, exp: str):
    a = os.getcwd()+os.sep+audio_folder
    export_folder = os.getcwd()+os.sep+exp
    if not os.path.isdir(export_folder).exists():
        os.mkdir(export_folder)
    s = os.getcwd()+os.sep+subs_folder
    for num,file,subtitle in zip(range(len(os.listdir(s))),os.listdir(a),os.listdir(s)): #repeat steps for every subtitle
        myaudio = AudioSegment.from_file(a+os.sep+file)  #can use arg variable here #read audio file from different directory
        subs = pysrt.open(f'{s+os.sep+subtitle}') #open the subtitle
        chunk_counter = 0
        #get timing of dialogue
        for subtitle in subs:
            start_timing = (datetime.strptime(str(subtitle.start),"%H:%M:%S,%f") - datetime(1900, 1, 1)).total_seconds()*1000
            end_timing = (datetime.strptime(str(subtitle.end),"%H:%M:%S,%f") - datetime(1900, 1, 1)).total_seconds()*1000
            if subtitle.text == "":
                continue
            my_chunk = myaudio[start_timing:end_timing] 
            #make chunks a bit bigger because sometime the audio gets cut off
            with open(f"{export_folder+os.sep+str(num)}_{chunk_counter}.txt", "w") as f:
                f.write(subtitle.text)
            wav_path = os.path.join(export_folder, f"{num}_{chunk_counter}.wav")
            my_chunk.export(wav_path, format="wav")
            chunk_counter+=1





def main(args):
    # df = pd.read_csv('data.csv')
    df = pd.read_csv(args.csv)
    links = np.array(df.link.values, dtype='U')
    for link in links:
        audiodn(args.format, args.sr, yt(link), audio_folder=args.i_audio, subtitle_folder=args.i_subs)
        audio_sub_splitter(args.i_subs, args.i_audio, args.o)

    print("Operation Successfull!")

if __name__=='__main__':
    import argparse
    my_parser = argparse.ArgumentParser(description="A simple tool to download wav format files from youtube for training along with its subtitles")
    my_parser.add_argument("--csv", metavar="csv file", help="file name of csv to read in current directory", required=True)
    my_parser.add_argument("--o", metavar="training", help="Output folder name in current directory", required=True)
    my_parser.add_argument("--i_audio",metavar="audio", help="Folder name in current directory to take read audio files from", required=True)
    my_parser.add_argument("--i_subs", metavar="subs",help="Folder name in current directory take subtitles from", required=True)
    my_parser.add_argument("--sr", help="Sample rate of audio to be downloaded(eg: 48000", required=True)
    my_parser.add_argument("--format", help="File format to extract from youtube ['mp4','webm'] etc", required=True)
    argss = my_parser.parse_args()
    
    main(args=argss)

    